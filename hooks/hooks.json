{
  "hooks": {
    "pre-commit": {
      "description": "Run AIVory compliance scan on staged files before commit",
      "enabled": false,
      "script": "#!/bin/sh\n# AIVory Guard Pre-commit Hook\n# Automatically installed by AIVory plugin\n\necho \"üîç Running AIVory compliance scan...\"\n\n# Get staged files that are source code\nSTAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\\.(java|py|js|ts|go|rs|rb|php|cs|kt|scala|swift|c|cpp|h|hpp)$')\n\nif [ -z \"$STAGED_FILES\" ]; then\n  echo \"‚úì No source files to scan\"\n  exit 0\nfi\n\necho \"Files to scan:\"\necho \"$STAGED_FILES\"\n\n# Run AIVory scan via Claude Code\n# Note: This requires Claude Code to be available in PATH\nif ! command -v claude &> /dev/null; then\n  echo \"‚ö†Ô∏è  Claude Code not found in PATH\"\n  echo \"   Skipping AIVory scan\"\n  echo \"   Install: npm install -g @anthropic-ai/claude-code\"\n  exit 0\nfi\n\n# Create temporary file list\nTEMP_FILE_LIST=$(mktemp)\necho \"$STAGED_FILES\" > \"$TEMP_FILE_LIST\"\n\n# Run scan\nclaude code \"/aivory-scan --staged-only --fail-on-critical --file-list=$TEMP_FILE_LIST\"\nEXIT_CODE=$?\n\n# Cleanup\nrm -f \"$TEMP_FILE_LIST\"\n\nif [ $EXIT_CODE -ne 0 ]; then\n  echo \"\"\n  echo \"‚ùå AIVory scan found critical compliance violations!\"\n  echo \"\"\n  echo \"To fix violations:\"\n  echo \"  1. Run: claude code '/aivory-fix'\"\n  echo \"  2. Or manually fix the violations\"\n  echo \"\"\n  echo \"To commit anyway (not recommended):\"\n  echo \"  git commit --no-verify\"\n  echo \"\"\n  exit 1\nfi\n\necho \"‚úì AIVory compliance scan passed\"\nexit 0\n",
      "failOnError": true
    },
    "pre-push": {
      "description": "Run AIVory compliance scan before pushing to remote",
      "enabled": false,
      "script": "#!/bin/sh\n# AIVory Guard Pre-push Hook\n\necho \"üîç Running AIVory compliance scan before push...\"\n\n# Get current branch\nCURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)\n\n# Get list of commits to be pushed\nREMOTE_BRANCH=\"origin/$CURRENT_BRANCH\"\n\n# Check if remote branch exists\nif git rev-parse --verify \"$REMOTE_BRANCH\" >/dev/null 2>&1; then\n  # Get changed files in commits to be pushed\n  CHANGED_FILES=$(git diff --name-only \"$REMOTE_BRANCH\"..HEAD | grep -E '\\.(java|py|js|ts|go|rs|rb|php|cs|kt|scala|swift|c|cpp|h|hpp)$')\nelse\n  # New branch, scan all files\n  echo \"‚ö†Ô∏è  New branch detected, scanning all tracked files\"\n  CHANGED_FILES=$(git ls-files | grep -E '\\.(java|py|js|ts|go|rs|rb|php|cs|kt|scala|swift|c|cpp|h|hpp)$')\nfi\n\nif [ -z \"$CHANGED_FILES\" ]; then\n  echo \"‚úì No source files changed\"\n  exit 0\nfi\n\necho \"Files to scan: $(echo \"$CHANGED_FILES\" | wc -l)\"\n\n# Run AIVory scan\nif ! command -v claude &> /dev/null; then\n  echo \"‚ö†Ô∏è  Claude Code not found in PATH\"\n  echo \"   Skipping AIVory scan\"\n  exit 0\nfi\n\n# Create temporary file list\nTEMP_FILE_LIST=$(mktemp)\necho \"$CHANGED_FILES\" > \"$TEMP_FILE_LIST\"\n\n# Run scan with medium threshold (less strict than pre-commit)\nclaude code \"/aivory-scan --file-list=$TEMP_FILE_LIST --confidence-threshold=70\"\nEXIT_CODE=$?\n\nrm -f \"$TEMP_FILE_LIST\"\n\nif [ $EXIT_CODE -ne 0 ]; then\n  echo \"\"\n  echo \"‚ùå AIVory scan found compliance violations!\"\n  echo \"\"\n  echo \"To view detailed report:\"\n  echo \"  claude code '/aivory-scan'\"\n  echo \"\"\n  echo \"To fix violations:\"\n  echo \"  claude code '/aivory-fix'\"\n  echo \"\"\n  echo \"To push anyway (not recommended):\"\n  echo \"  git push --no-verify\"\n  echo \"\"\n  exit 1\nfi\n\necho \"‚úì AIVory compliance scan passed\"\nexit 0\n",
      "failOnError": true
    },
    "commit-msg": {
      "description": "Add AIVory compliance info to commit messages",
      "enabled": false,
      "script": "#!/bin/sh\n# AIVory Guard Commit Message Hook\n# Adds compliance scan info to commit messages\n\nCOMMIT_MSG_FILE=$1\n\n# Check if this is an AIVory fix commit\nif grep -q \"fix(compliance):\" \"$COMMIT_MSG_FILE\"; then\n  # Already has compliance tag, don't modify\n  exit 0\nfi\n\n# Check if we have recent AIVory scan results\nAIVORY_SCAN_RESULT=\".aivory/last-scan-result.txt\"\n\nif [ -f \"$AIVORY_SCAN_RESULT\" ]; then\n  # Append AIVory scan info to commit message\n  echo \"\" >> \"$COMMIT_MSG_FILE\"\n  echo \"AIVory Compliance Scan:\" >> \"$COMMIT_MSG_FILE\"\n  cat \"$AIVORY_SCAN_RESULT\" >> \"$COMMIT_MSG_FILE\"\nfi\n\nexit 0\n",
      "failOnError": false
    },
    "post-merge": {
      "description": "Run AIVory scan after merging to detect new violations",
      "enabled": false,
      "script": "#!/bin/sh\n# AIVory Guard Post-merge Hook\n# Scan for compliance violations after merge\n\necho \"üîç Running AIVory compliance scan after merge...\"\n\nif ! command -v claude &> /dev/null; then\n  echo \"‚ö†Ô∏è  Claude Code not found, skipping scan\"\n  exit 0\nfi\n\n# Run scan on merged changes (non-blocking)\nclaude code \"/aivory-scan --branch=current\" &\n\necho \"‚úì AIVory scan started in background\"\necho \"  View results with: claude code '/aivory-dashboard'\"\n\nexit 0\n",
      "failOnError": false
    }
  },
  "configuration": {
    "enableByDefault": false,
    "allowBypass": true,
    "notifyOnViolations": true,
    "confidenceThreshold": {
      "pre-commit": 80,
      "pre-push": 70,
      "other": 60
    },
    "failOnCritical": true,
    "failOnHigh": false
  },
  "installation": {
    "instructions": "Run /aivory-init to configure git hooks for your project",
    "requirements": [
      "Claude Code installed and in PATH",
      "AIVory MCP server configured",
      "Git repository initialized"
    ],
    "notes": [
      "Hooks can be bypassed with --no-verify flag",
      "Configure threshold in .aivory/config.yml",
      "Enable/disable hooks via /aivory-init or manually in .git/hooks/"
    ]
  }
}
